/**
 * Thy Street
 * These are API's to easily manage your Thy Street device public pages. Thy Street APIs are completely RESTful and all our responses are returned in JSON.
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: support@thystreet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceTokenDto from '../model/DeviceTokenDto';
import SetDeviceDetailsDto from '../model/SetDeviceDetailsDto';

/**
* Device service.
* @module api/DeviceApi
* @version 0.0.2
*/
export default class DeviceApi {

    /**
    * Constructs a new DeviceApi. 
    * @alias module:api/DeviceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} deviceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    generateTokenWithHttpInfo(deviceId) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling generateToken");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['thystreetAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/generate/{deviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} deviceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    generateToken(deviceId) {
      return this.generateTokenWithHttpInfo(deviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SetDeviceDetailsDto} setDeviceDetailsDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setDetailsWithHttpInfo(setDeviceDetailsDto) {
      let postBody = setDeviceDetailsDto;
      // verify the required parameter 'setDeviceDetailsDto' is set
      if (setDeviceDetailsDto === undefined || setDeviceDetailsDto === null) {
        throw new Error("Missing the required parameter 'setDeviceDetailsDto' when calling setDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['thystreetAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SetDeviceDetailsDto} setDeviceDetailsDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setDetails(setDeviceDetailsDto) {
      return this.setDetailsWithHttpInfo(setDeviceDetailsDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeviceTokenDto} deviceTokenDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setTokenWithHttpInfo(deviceTokenDto) {
      let postBody = deviceTokenDto;
      // verify the required parameter 'deviceTokenDto' is set
      if (deviceTokenDto === undefined || deviceTokenDto === null) {
        throw new Error("Missing the required parameter 'deviceTokenDto' when calling setToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['thystreetAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/token', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeviceTokenDto} deviceTokenDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setToken(deviceTokenDto) {
      return this.setTokenWithHttpInfo(deviceTokenDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
